import os
import asyncio
import logging
from datetime import datetime

from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.exceptions import TelegramRetryAfter, TelegramForbiddenError

from main import bot, cursor, conn   # —ñ–º–ø–æ—Ä—Ç—É—î–º–æ –∑ —Ç–≤–æ–≥–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª—É

# –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –Ü–Ω—Ç–µ—Ä–≤–∞–ª —É —Å–µ–∫—É–Ω–¥–∞—Ö
AUTOPOST_INTERVAL = int(os.getenv("AUTOPOST_INTERVAL", 3600))

PUBLISH_CHAT_ID = int(os.getenv("PUBLISH_CHAT_ID"))

async def autopost():
    while True:
        try:
            # –±–µ—Ä–µ–º–æ –æ–¥–Ω–µ –Ω–æ–≤–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è
            cursor.execute("""
                SELECT id, user_id, username, first_name, category, district, title, description, photos, contacts
                FROM ads
                WHERE is_published=0 AND is_rejected=0
                ORDER BY created_at ASC
                LIMIT 1
            """)
            ad = cursor.fetchone()

            if ad:
                ad_id, user_id, username, first_name, category, district, title, description, photos, contacts = ad

                # —à—É–∫–∞—î–º–æ –≥—ñ–ª–∫—É –¥–ª—è —Ü—ñ—î—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
                cursor.execute(
                    "SELECT thread_id FROM threads WHERE chat_id=? AND title=?",
                    (PUBLISH_CHAT_ID, category)
                )
                row = cursor.fetchone()

                if not row:
                    logging.warning(f"‚ùå –ö–∞—Ç–µ–≥–æ—Ä—ñ—è '{category}' –Ω–µ –ø—Ä–∏–≤ º—è–∑–∞–Ω–∞ –¥–æ –ø—É–±–ª—ñ—á–Ω–æ–≥–æ —á–∞—Ç—É")
                else:
                    thread_id = row[0]

                    pub_text = (
                        f"üì¢ –û–ì–û–õ–û–®–ï–ù–ù–Ø #{ad_id}\n\n"
                        f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {first_name or ''} (@{username})\n\n"
                        f"üîπ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {category}\n"
                        f"üìç –†–∞–π–æ–Ω: {district}\n"
                        f"üè∑ –ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}\n"
                        f"üìù –û–ø–∏—Å: {description}\n"
                        f"üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏: {contacts}\n"
                    )

                    pub_kb = InlineKeyboardMarkup()
                    if username:
                        pub_kb.add(InlineKeyboardButton(f"üë§ @{username}", url=f"https://t.me/{username}"))
                    else:
                        pub_kb.add(InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ—ñ–ª—å", url=f"tg://user?id={user_id}"))
                    pub_kb.add(InlineKeyboardButton("üîó –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è", switch_inline_query=str(ad_id)))

                    try:
                        if photos:
                            photos = photos.split(",")
                            if len(photos) == 1:
                                await bot.send_photo(
                                    chat_id=PUBLISH_CHAT_ID,
                                    message_thread_id=thread_id,
                                    photo=photos[0],
                                    caption=pub_text,
                                    reply_markup=pub_kb
                                )
                            else:
                                media = [types.InputMediaPhoto(p) for p in photos[:10]]
                                await bot.send_media_group(chat_id=PUBLISH_CHAT_ID, message_thread_id=thread_id, media=media)
                                await bot.send_message(
                                    chat_id=PUBLISH_CHAT_ID,
                                    message_thread_id=thread_id,
                                    text=pub_text,
                                    reply_markup=pub_kb
                                )
                        else:
                            await bot.send_message(
                                chat_id=PUBLISH_CHAT_ID,
                                message_thread_id=thread_id,
                                text=pub_text,
                                reply_markup=pub_kb
                            )

                        # –ø–æ–∑–Ω–∞—á–∞—î–º–æ —è–∫ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–µ
                        cursor.execute("UPDATE ads SET is_published=1 WHERE id=?", (ad_id,))
                        conn.commit()
                        logging.info(f"‚úÖ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥: –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è #{ad_id} –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–µ")

                    except TelegramRetryAfter as e:
                        logging.warning(f"Flood control: sleep {e.timeout}s")
                        await asyncio.sleep(e.timeout)
                    except TelegramForbiddenError:
                        logging.error("‚ùå –ë–æ—Ç –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π —É –∫–∞–Ω–∞–ª—ñ/—á–∞—Ç—ñ")

            await asyncio.sleep(AUTOPOST_INTERVAL)

        except Exception as e:
            logging.exception(f"–ü–æ–º–∏–ª–∫–∞ –≤ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥—É: {e}")
            await asyncio.sleep(AUTOPOST_INTERVAL)


if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.run_until_complete(autopost())