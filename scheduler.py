import os
import logging
import asyncio
import sqlite3
from dotenv import load_dotenv
from pathlib import Path
from aiogram import Bot, types
from aiogram.types import (
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    InlineQuery,
    InlineQueryResultArticle,
    InputTextMessageContent
)

env_path = Path(__file__).parent / ".env"
load_dotenv(dotenv_path=env_path)

TOKEN = os.getenv("BOT_TOKEN")
PUBLISH_CHAT_ID = int(os.getenv("PUBLISH_CHAT_ID"))
DB_PATH = "bot.db"

bot = Bot(token=TOKEN, parse_mode="HTML")

logging.basicConfig(level=logging.INFO)

async def autopost_once():
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    # –±–µ—Ä–µ–º–æ –æ–¥–Ω–µ –Ω–æ–≤–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è
    cursor.execute("""
        SELECT id, user_id, username, first_name, category, district, title, description, photos, contacts
        FROM ads
        WHERE is_queued=1 AND is_published=0 AND is_rejected=0
        ORDER BY created_at ASC
        LIMIT 1
    """)
    ad = cursor.fetchone()

    if ad:
        ad_id, user_id, username, first_name, category, district, title, description, photos, contacts = ad

        # —à—É–∫–∞—î–º–æ –≥—ñ–ª–∫—É –¥–ª—è —Ü—ñ—î—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
        cursor.execute(
            "SELECT thread_id FROM threads WHERE chat_id=? AND title=?",
            (PUBLISH_CHAT_ID, category)
        )
        row = cursor.fetchone()

        if not row:
            logging.warning(f"‚ùå –ö–∞—Ç–µ–≥–æ—Ä—ñ—è '{category}' –Ω–µ –ø—Ä–∏–≤ º—è–∑–∞–Ω–∞ –¥–æ –ø—É–±–ª—ñ—á–Ω–æ–≥–æ —á–∞—Ç—É")
        else:
            thread_id = row[0]

            pub_text = (
                f"üì¢ –û–ì–û–õ–û–®–ï–ù–ù–Ø #{ad_id}\n\n"
                f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {first_name or ''} (@{username})\n\n"
                f"üîπ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {category}\n"
                f"üìç –†–∞–π–æ–Ω: {district}\n"
                f"üè∑ –ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}\n"
                f"üìù –û–ø–∏—Å: {description}\n"
                f"üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏: {contacts}\n"
            )

            pub_kb = InlineKeyboardMarkup()
            if username:
                pub_kb.add(InlineKeyboardButton(f"üë§ @{username}", url=f"https://t.me/{username}"))
            else:
                pub_kb.add(InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ—ñ–ª—å", url=f"tg://user?id={user_id}"))
            pub_kb.add(InlineKeyboardButton("üîó –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è", switch_inline_query=str(ad_id)))

            try:
                if photos:
                    photos = photos.split(",")
                    if len(photos) == 1:
                        await bot.send_photo(
                            chat_id=PUBLISH_CHAT_ID,
                            message_thread_id=thread_id,
                            photo=photos[0],
                            caption=pub_text,
                            reply_markup=pub_kb
                        )
                    else:
                        media = [types.InputMediaPhoto(p) for p in photos[:10]]
                        await bot.send_media_group(chat_id=PUBLISH_CHAT_ID, message_thread_id=thread_id, media=media)
                        await bot.send_message(
                            chat_id=PUBLISH_CHAT_ID,
                            message_thread_id=thread_id,
                            text=pub_text,
                            reply_markup=pub_kb
                        )
                else:
                    await bot.send_message(
                        chat_id=PUBLISH_CHAT_ID,
                        message_thread_id=thread_id,
                        text=pub_text,
                        reply_markup=pub_kb
                    )

                # –ø–æ–∑–Ω–∞—á–∞—î–º–æ —è–∫ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–µ
                cursor.execute("UPDATE ads SET is_published=1, is_queued=0 WHERE id=?", (ad_id,))
                conn.commit()
                kb = ReplyKeyboardMarkup(resize_keyboard=True).add("üì¢ –ü–æ–¥–∞—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è","üìã –ú–æ—ó –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è")
                bot.send_message(user_id, "‚úÖ –í–∞—à–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–µ!", reply_markup=kb)
            finally:
                conn.close()

if __name__ == "__main__":
    asyncio.run(autopost_once())