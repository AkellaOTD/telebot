from fastapi import FastAPI, Request
import os
import re
import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import (
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)
import uvicorn

# -------------------------------
# üîπ –ö–æ–Ω—Ñ—ñ–≥
# -------------------------------
TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_HOST = os.getenv("WEBHOOK_HOST")
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
app = FastAPI()

# -------------------------------
# üîπ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö
# -------------------------------
conn = sqlite3.connect("bot.db", check_same_thread=False)
cursor = conn.cursor()

cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER UNIQUE,
    accepted_rules BOOLEAN
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS ads (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    username TEXT,
    first_name TEXT,
    category TEXT,
    district TEXT,
    title TEXT,
    description TEXT,
    photos TEXT,
    contacts TEXT,
    is_published INTEGER DEFAULT 0,
    is_rejected INTEGER DEFAULT 0,
    rejection_reason TEXT,
    moder_message_id INTEGER
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS threads (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    chat_id INTEGER,
    thread_id INTEGER,
    title TEXT,
    UNIQUE(chat_id, thread_id)
)
""")
conn.commit()

# -------------------------------
# üîπ FSM
# -------------------------------
class AdForm(StatesGroup):
    category = State()
    district = State()
    title = State()
    description = State()
    photos = State()
    contacts = State()

# -------------------------------
# üîπ –§—ñ–ª—å—Ç—Ä —Ç–µ–∫—Å—Ç—É
# -------------------------------
BANNED_WORDS = os.getenv("BANNED_WORDS", "").split(",")
BANNED_WORDS = [w.strip().lower() for w in BANNED_WORDS if w.strip()]

def validate_input(text: str) -> tuple[bool, str]:
    if re.search(r"(http[s]?://|www\.|t\.me/)", text, re.IGNORECASE):
        return False, "‚ùå –¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è!"
    lowered = text.lower()
    for word in BANNED_WORDS:
        if word in lowered:
            return False, f"‚ùå –¢–µ–∫—Å—Ç –º—ñ—Å—Ç–∏—Ç—å –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–µ —Å–ª–æ–≤–æ: {word}"
    return True, ""

# -------------------------------
# üîπ –î–æ–ø–æ–º—ñ–∂–Ω—ñ –∫–Ω–æ–ø–∫–∏
# -------------------------------
def get_moder_keyboard(ad_id: int, user_id: int, username: str | None):
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("‚úÖ –û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏", callback_data=f"publish_{ad_id}"),
        InlineKeyboardButton("‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"reject_{ad_id}")
    )
    if username:
        kb.add(InlineKeyboardButton(f"üë§ @{username}", url=f"https://t.me/{username}"))
    else:
        kb.add(InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ—ñ–ª—å", url=f"tg://user?id={user_id}"))
    return kb

def get_user_button(user_id: int, username: str | None):
    if username:
        return InlineKeyboardButton(f"üë§ @{username}", url=f"https://t.me/{username}")
    else:
        return InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ—ñ–ª—å", url=f"tg://user?id={user_id}")

# -------------------------------
# üîπ /start
# -------------------------------
@dp.message_handler(commands="start")
async def cmd_start(message: types.Message):
    cursor.execute("SELECT accepted_rules FROM users WHERE user_id = ?", (message.from_user.id,))
    user = cursor.fetchone()

    if user and user[0]:
        await message.answer("‚úÖ –í–∏ –≤–∂–µ –ø–æ–≥–æ–¥–∏–ª–∏—Å—å –∑ –ø—Ä–∞–≤–∏–ª–∞–º–∏! –ú–æ–∂–µ—Ç–µ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –∫–æ–º–∞–Ω–¥–æ—é /create")
        return

    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("‚úÖ –ü–æ–≥–æ–¥–∂—É—é—Å—å", "‚ùå –ù–µ –ø–æ–≥–æ–¥–∂—É—é—Å—å")
    await message.answer(
        "üìú –ü—Ä–∞–≤–∏–ª–∞:\n1. –ë–µ–∑ –ø–æ—Å–∏–ª–∞–Ω—å.\n2. –ë–µ–∑ —Å–ø–∞–º—É.\n3. –ó–∞–±–æ—Ä–æ–Ω–µ–Ω—ñ —Å–ª–æ–≤–∞ –Ω–µ –¥–æ–ø—É—Å–∫–∞—é—Ç—å—Å—è.\n\n–í–∏ –ø–æ–≥–æ–¥–∂—É—î—Ç–µ—Å—å?",
        reply_markup=kb
    )

@dp.message_handler(lambda msg: msg.text in ["‚úÖ –ü–æ–≥–æ–¥–∂—É—é—Å—å", "‚ùå –ù–µ –ø–æ–≥–æ–¥–∂—É—é—Å—å"])
async def rules_answer(message: types.Message):
    if message.text == "‚úÖ –ü–æ–≥–æ–¥–∂—É—é—Å—å":
        cursor.execute(
            "INSERT OR REPLACE INTO users (user_id, accepted_rules) VALUES (?, ?)",
            (message.from_user.id, True)
        )
        conn.commit()
        await message.answer("‚úÖ –î—è–∫—É—î–º–æ! –¢–µ–ø–µ—Ä –º–æ–∂–µ—Ç–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –∫–æ–º–∞–Ω–¥–æ—é /create", reply_markup=ReplyKeyboardRemove())
    else:
        await message.answer("üëã –î–æ–±—Ä–µ, –¥–æ –∑—É—Å—Ç—Ä—ñ—á—ñ!", reply_markup=ReplyKeyboardRemove())

# -------------------------------
# üîπ –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥–∞—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è"
# -------------------------------
@dp.message_handler(lambda msg: msg.text == "üì¢ –ü–æ–¥–∞—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è")
async def handle_new_ad_button(message: types.Message, state: FSMContext):
    await cmd_create(message, state)

# -------------------------------
# üîπ /create (FSM)
# -------------------------------
@dp.message_handler(commands="create")
async def cmd_create(message: types.Message, state: FSMContext):
    cursor.execute("SELECT accepted_rules FROM users WHERE user_id = ?", (message.from_user.id,))
    user = cursor.fetchone()
    if not user or not user[0]:
        await message.answer("‚ö†Ô∏è –°–ø–µ—Ä—à—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–æ–≥–æ–¥–∏—Ç–∏—Å—å —ñ–∑ –ø—Ä–∞–≤–∏–ª–∞–º–∏! –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /start")
        return

    cursor.execute("SELECT title FROM threads WHERE chat_id=?", (int(os.getenv("MODERATORS_CHAT_ID")),))
    categories = [row[0] for row in cursor.fetchall()]
    if not categories:
        await message.answer("‚ö†Ô∏è –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π. –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–∞—î –¥–æ–¥–∞—Ç–∏ –≥—ñ–ª–∫–∏ –∫–æ–º–∞–Ω–¥–æ—é /bindthread")
        return

    await AdForm.category.set()
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    for c in categories:
        kb.add(c)
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=kb)

@dp.message_handler(state=AdForm.category)
async def process_category(message: types.Message, state: FSMContext):
    await state.update_data(category=message.text)
    await AdForm.next()
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("–¶–µ–Ω—Ç—Ä", "–õ—ñ–≤–∏–π –±–µ—Ä–µ–≥", "–ü—Ä–∞–≤–∏–π –±–µ—Ä–µ–≥")
    await message.answer("–û–±–µ—Ä—ñ—Ç—å —Ä–∞–π–æ–Ω:", reply_markup=kb)

@dp.message_handler(state=AdForm.district)
async def process_district(message: types.Message, state: FSMContext):
    await state.update_data(district=message.text)
    await AdForm.next()
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–¥–æ 200 —Å–∏–º–≤–æ–ª—ñ–≤):", reply_markup=ReplyKeyboardRemove())

@dp.message_handler(state=AdForm.title)
async def process_title(message: types.Message, state: FSMContext):
    if len(message.text) > 200:
        await message.answer("‚ùå –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π (–º–∞–∫—Å 200 —Å–∏–º–≤–æ–ª—ñ–≤)")
        return
    valid, error = validate_input(message.text)
    if not valid:
        await message.answer(error)
        return
    await state.update_data(title=message.text)
    await AdForm.next()
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å (–¥–æ 2000 —Å–∏–º–≤–æ–ª—ñ–≤):")

@dp.message_handler(state=AdForm.description)
async def process_description(message: types.Message, state: FSMContext):
    if len(message.text) > 2000:
        await message.answer("‚ùå –û–ø–∏—Å –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π (–º–∞–∫—Å 2000 —Å–∏–º–≤–æ–ª—ñ–≤)")
        return
    valid, error = validate_input(message.text)
    if not valid:
        await message.answer(error)
        return
    await state.update_data(description=message.text)
    await AdForm.next()
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏")
    await message.answer("–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ (–¥–æ 20 —à—Ç). –Ø–∫—â–æ –±–µ–∑ —Ñ–æ—Ç–æ ‚Äî –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏¬ª.", reply_markup=kb)

@dp.message_handler(content_types=["photo", "text"], state=AdForm.photos)
async def process_photos(message: types.Message, state: FSMContext):
    data = await state.get_data()
    photos = data.get("photos", "")

    if message.content_type == "photo":
        file_id = message.photo[-1].file_id
        photos = (photos + "," + file_id).strip(",")
        await state.update_data(photos=photos)
        kb = ReplyKeyboardMarkup(resize_keyboard=True)
        kb.add("–ì–æ—Ç–æ–≤–æ")
        await message.answer("–§–æ—Ç–æ –¥–æ–¥–∞–Ω–æ ‚úÖ –Ø–∫—â–æ –≤—Å–µ ‚Äî –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–ì–æ—Ç–æ–≤–æ¬ª.", reply_markup=kb)
    elif message.text.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏":
        await AdForm.next()
        await message.answer("–í–≤–µ–¥—ñ—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é (–¥–æ 200 —Å–∏–º–≤–æ–ª—ñ–≤):", reply_markup=ReplyKeyboardRemove())
    elif message.text.lower() == "–≥–æ—Ç–æ–≤–æ":
        await AdForm.next()
        await message.answer("–í–≤–µ–¥—ñ—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é (–¥–æ 200 —Å–∏–º–≤–æ–ª—ñ–≤):", reply_markup=ReplyKeyboardRemove())

@dp.message_handler(state=AdForm.contacts)
async def process_contacts(message: types.Message, state: FSMContext):
    if len(message.text) > 200:
        await message.answer("‚ùå –ö–æ–Ω—Ç–∞–∫—Ç–∏ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥—ñ (–º–∞–∫—Å 200 —Å–∏–º–≤–æ–ª—ñ–≤)")
        return
    valid, error = validate_input(message.text)
    if not valid:
        await message.answer(error)
        return

    await state.update_data(contacts=message.text)
    data = await state.get_data()

    cursor.execute("""
        INSERT INTO ads (
            user_id, username, first_name, category, district, title, description, photos, contacts,
            is_published, is_rejected, rejection_reason
        )
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, 0, 0, NULL)
    """, (
        message.from_user.id,
        message.from_user.username,
        message.from_user.first_name,
        data["category"],
        data["district"],
        data["title"],
        data["description"],
        data.get("photos", ""),
        data["contacts"]
    ))
    conn.commit()

    cursor.execute("SELECT last_insert_rowid()")
    ad_id = cursor.fetchone()[0]

    moder_text = (
        f"üì¢ –ù–û–í–ï –û–ì–û–õ–û–®–ï–ù–ù–Ø #{ad_id}\n\n"
        f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {message.from_user.first_name or ''} "
        f"(@{message.from_user.username}) [ID: {message.from_user.id}]\n\n"
        f"üîπ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {data['category']}\n"
        f"üìç –†–∞–π–æ–Ω: {data['district']}\n"
        f"üè∑ –ó–∞–≥–æ–ª–æ–≤–æ–∫: {data['title']}\n"
        f"üìù –û–ø–∏—Å: {data['description']}\n"
        f"üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏: {data['contacts']}\n"
    )

    kb = get_moder_keyboard(ad_id, message.from_user.id, message.from_user.username)

    # –®—É–∫–∞—î–º–æ –≥—ñ–ª–∫—É –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü—ñ—ó
    cursor.execute("""
        SELECT chat_id, thread_id FROM threads
        WHERE title=? AND chat_id=?
    """, (data["category"], int(os.getenv("MODERATORS_CHAT_ID"))))
    row = cursor.fetchone()

    if not row:
        await message.answer("‚ùå –î–ª—è —Ü—ñ—î—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≥—ñ–ª–∫–∏ —É –≥—Ä—É–ø—ñ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ñ–≤")
        return

    moder_chat_id, moder_thread_id = row

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É –≥—ñ–ª–∫—É
    msg = await bot.send_message(
        chat_id=moder_chat_id,
        message_thread_id=moder_thread_id,
        text=moder_text,
        reply_markup=kb
    )

    cursor.execute("UPDATE ads SET moder_message_id=? WHERE id=?", (msg.message_id, ad_id))
    conn.commit()

    await message.answer("‚úÖ –í–∞—à–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ —Ç–∞ –ø–µ—Ä–µ–¥–∞–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é!", reply_markup=ReplyKeyboardRemove())
    await state.finish()

# -------------------------------
# üîπ –ú–æ–¥–µ—Ä–∞—Ü—ñ—è
# -------------------------------
@dp.callback_query_handler(lambda c: c.data.startswith("reject_"))
async def process_reject(callback_query: types.CallbackQuery):
    ad_id = int(callback_query.data.split("_")[1])
    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(
        InlineKeyboardButton("‚ùå –ó–∞–±–æ—Ä–æ–Ω–µ–Ω—ñ —Å–ª–æ–≤–∞", callback_data=f"reason_banned_{ad_id}"),
        InlineKeyboardButton("‚ùå –Ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è", callback_data=f"reason_link_{ad_id}"),
        InlineKeyboardButton("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó", callback_data=f"reason_info_{ad_id}")
    )
    await callback_query.message.answer(
        f"–í–∏–±–µ—Ä—ñ—Ç—å –ø—Ä–∏—á–∏–Ω—É –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –¥–ª—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è #{ad_id}:",
        reply_markup=kb
    )
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data.startswith("reason_"))
async def process_reject_reason(callback_query: types.CallbackQuery):
    parts = callback_query.data.split("_")
    reason_type, ad_id = parts[1], int(parts[2])
    reasons = {
        "banned": "–ú—ñ—Å—Ç–∏—Ç—å –∑–∞–±–æ—Ä–æ–Ω–µ–Ω—ñ —Å–ª–æ–≤–∞",
        "link": "–Ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è",
        "info": "–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó"
    }
    reason = reasons.get(reason_type, "–í—ñ–¥—Ö–∏–ª–µ–Ω–æ")

    cursor.execute("UPDATE ads SET is_rejected=1, rejection_reason=? WHERE id=?", (reason, ad_id))
    conn.commit()

    cursor.execute("SELECT user_id FROM ads WHERE id=?", (ad_id,))
    user_id = cursor.fetchone()[0]

    kb = ReplyKeyboardMarkup(resize_keyboard=True).add("üì¢ –ü–æ–¥–∞—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è")

    await bot.send_message(
        user_id,
        f"‚ùå –í–∞—à–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è #{ad_id} –±—É–ª–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}",
        reply_markup=kb
    )
    await callback_query.message.answer(f"‚úÖ –û–≥–æ–ª–æ—à–µ–Ω–Ω—è #{ad_id} –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ. –ü—Ä–∏—á–∏–Ω–∞: {reason}")
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data.startswith("publish_"))
async def process_publish(callback_query: types.CallbackQuery):
    ad_id = int(callback_query.data.split("_")[1])
    cursor.execute("SELECT user_id, username, first_name, category, district, title, description, photos, contacts FROM ads WHERE id=?", (ad_id,))
    ad = cursor.fetchone()

    if not ad:
        await callback_query.answer("–û–≥–æ–ª–æ—à–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ ‚ùå", show_alert=True)
        return

    user_id, username, first_name, category, district, title, description, photos, contacts = ad
    cursor.execute("UPDATE ads SET is_published=1 WHERE id=?", (ad_id,))
    conn.commit()

    pub_text = (
        f"üì¢ –û–ì–û–õ–û–®–ï–ù–ù–Ø #{ad_id}\n\n"
        f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {first_name or ''} (@{username})\n\n"
        f"üîπ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {category}\n"
        f"üìç –†–∞–π–æ–Ω: {district}\n"
        f"üè∑ –ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}\n"
        f"üìù –û–ø–∏—Å: {description}\n"
        f"üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏: {contacts}\n"
    )
    pub_kb = InlineKeyboardMarkup().add(get_user_button(user_id, username))

    # —à—É–∫–∞—î–º–æ thread_id —ñ chat_id
    cursor.execute("SELECT thread_id FROM threads WHERE chat_id=? AND title=?", (int(os.getenv("PUBLISH_CHAT_ID")), category))
    row = cursor.fetchone()
    if not row:
        await callback_query.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä—ñ—è –Ω–µ –ø—Ä–∏–≤ º—è–∑–∞–Ω–∞ –¥–æ –≥—ñ–ª–∫–∏ —É –≥—Ä—É–ø—ñ –ø—É–±–ª—ñ–∫–∞—Ü—ñ–π", show_alert=True)
        return

    chat_id = int(os.getenv("PUBLISH_CHAT_ID"))
    thread_id = row[0]

    if photos:
        photos = photos.split(",")
        if len(photos) == 1:
            await bot.send_photo(
                chat_id=chat_id,
                message_thread_id=thread_id,
                photo=photos[0],
                caption=pub_text,
                reply_markup=pub_kb
            )
        else:
            media = [types.InputMediaPhoto(p) for p in photos[:10]]
            await bot.send_media_group(chat_id=chat_id, message_thread_id=thread_id, media=media)
            await bot.send_message(
                chat_id=chat_id,
                message_thread_id=thread_id,
                text=pub_text,
                reply_markup=pub_kb
            )
    else:
        await bot.send_message(
            chat_id=chat_id,
            message_thread_id=thread_id,
            text=pub_text,
            reply_markup=pub_kb
        )

    kb = ReplyKeyboardMarkup(resize_keyboard=True).add("üì¢ –ü–æ–¥–∞—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è")
    await bot.send_message(user_id, "‚úÖ –í–∞—à–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–µ!", reply_markup=kb)
    await callback_query.answer("–û–≥–æ–ª–æ—à–µ–Ω–Ω—è –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–µ ‚úÖ")

# -------------------------------
# üîπ –ö–æ–º–∞–Ω–¥–∞ /bindthread
# -------------------------------
@dp.message_handler(commands=["bindthread"], chat_type=[types.ChatType.SUPERGROUP])
async def bind_thread(message: types.Message):
    if not message.is_topic_message:
        await message.reply("‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ü—é –∫–æ–º–∞–Ω–¥—É —Ç—ñ–ª—å–∫–∏ –≤ –≥—ñ–ª—Ü—ñ (—Ñ–æ—Ä—É–º-—Ç–µ–º—ñ).")
        return
    args = message.get_args()
    if not args:
        await message.reply("‚ùå –í–∏ –Ω–µ –≤–∫–∞–∑–∞–ª–∏ –Ω–∞–∑–≤—É.\n–ü—Ä–∏–∫–ª–∞–¥: `/bindthread –ü—Ä–æ–¥–∞–∂ —Ç–≤–∞—Ä–∏–Ω`", parse_mode="Markdown")
        return

    chat_id = message.chat.id
    thread_id = message.message_thread_id
    title = args.strip()

    cursor.execute("""
        INSERT INTO threads (chat_id, thread_id, title)
        VALUES (?, ?, ?)
        ON CONFLICT(chat_id, thread_id) DO UPDATE SET title=excluded.title
    """, (chat_id, thread_id, title))
    conn.commit()

    await message.reply(f"‚úÖ –ì—ñ–ª–∫—É –∑–±–µ—Ä–µ–∂–µ–Ω–æ —è–∫: *{title}*", parse_mode="Markdown")

# -------------------------------
# üîπ API
# -------------------------------
@app.get("/threads")
async def get_threads():
    cursor.execute("SELECT chat_id, thread_id, title FROM threads")
    rows = cursor.fetchall()
    return {"threads": [{"chat_id": r[0], "thread_id": r[1], "title": r[2]} for r in rows]}

# -------------------------------
# üîπ FastAPI endpoints
# -------------------------------
@app.on_event("startup")
async def on_startup():
    await bot.set_webhook(WEBHOOK_URL)

@app.post(WEBHOOK_PATH)
async def webhook(request: Request):
    data = await request.json()
    update = types.Update.to_object(data)
    from aiogram import Bot
    Bot.set_current(bot)
    Dispatcher.set_current(dp)
    await dp.process_update(update)
    return {"ok": True}

# -------------------------------
# üîπ –õ–æ–∫–∞–ª—å–Ω–∏–π –∑–∞–ø—É—Å–∫
# -------------------------------
if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=int(os.getenv("PORT", 8000)))