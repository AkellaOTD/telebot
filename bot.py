import os
import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto
from fastapi import FastAPI
import uvicorn

# -------------------
# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
# -------------------
BOT_TOKEN = os.getenv("BOT_TOKEN")
MODERATORS_CHAT_ID = int(os.getenv("MODERATORS_CHAT_ID"))
PUBLISH_CHAT_ID = int(os.getenv("PUBLISH_CHAT_ID"))

bot = Bot(token=BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher(bot, storage=MemoryStorage())
app = FastAPI()

# -------------------
# –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö
# -------------------
conn = sqlite3.connect("ads.db", check_same_thread=False)
cursor = conn.cursor()

cursor.execute("""
CREATE TABLE IF NOT EXISTS ads (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    category TEXT,
    district TEXT,
    title TEXT,
    description TEXT,
    photos TEXT,
    contacts TEXT,
    is_published BOOLEAN DEFAULT 0,
    is_rejected BOOLEAN DEFAULT 0,
    rejection_reason TEXT,
    moder_message_id INTEGER
)
""")
conn.commit()

# -------------------
# –°—Ç–∞–Ω –º–∞—à–∏–Ω–∏
# -------------------
class AdForm(StatesGroup):
    category = State()
    district = State()
    title = State()
    description = State()
    photos = State()
    contacts = State()


class RejectAd(StatesGroup):
    waiting_reason = State()


# -------------------
# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü—ñ—ó
# -------------------
def get_moder_keyboard(ad_id: int):
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("‚úÖ –û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏", callback_data=f"publish_{ad_id}"),
        InlineKeyboardButton("‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"reject_{ad_id}")
    )
    return kb


# -------------------
# –°—Ç–∞—Ä—Ç –±–æ—Ç–∞
# -------------------
@dp.message_handler(commands=["start"])
async def start_cmd(message: types.Message):
    await message.answer("üëã –í—ñ—Ç–∞—é! –î–∞–≤–∞–π—Ç–µ —Å—Ç–≤–æ—Ä–∏–º–æ –≤–∞—à–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è.\n–ù–∞–ø–∏—à—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:")
    await AdForm.category.set()


# -------------------
# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è
# -------------------
@dp.message_handler(state=AdForm.category)
async def ad_category(message: types.Message, state: FSMContext):
    await state.update_data(category=message.text)
    await message.answer("üìç –í–∫–∞–∂—ñ—Ç—å —Ä–∞–π–æ–Ω:")
    await AdForm.next()


@dp.message_handler(state=AdForm.district)
async def ad_district(message: types.Message, state: FSMContext):
    await state.update_data(district=message.text)
    await message.answer("üè∑ –í–≤–µ–¥—ñ—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–¥–æ 200 —Å–∏–º–≤–æ–ª—ñ–≤):")
    await AdForm.next()


@dp.message_handler(state=AdForm.title)
async def ad_title(message: types.Message, state: FSMContext):
    if len(message.text) > 200:
        return await message.answer("‚ùå –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π, –º–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª—ñ–≤")
    await state.update_data(title=message.text)
    await message.answer("üìù –í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å (–¥–æ 2000 —Å–∏–º–≤–æ–ª—ñ–≤):")
    await AdForm.next()


@dp.message_handler(state=AdForm.description)
async def ad_description(message: types.Message, state: FSMContext):
    if len(message.text) > 2000:
        return await message.answer("‚ùå –û–ø–∏—Å –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π, –º–∞–∫—Å–∏–º—É–º 2000 —Å–∏–º–≤–æ–ª—ñ–≤")
    await state.update_data(description=message.text)
    await message.answer("üì∏ –ù–∞–¥—ñ—à–ª—ñ—Ç—å –¥–æ 20 —Ñ–æ—Ç–æ (–∞–±–æ /skip —â–æ–± –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏):")
    await AdForm.next()


@dp.message_handler(lambda m: m.text == "/skip", state=AdForm.photos)
async def skip_photos(message: types.Message, state: FSMContext):
    await state.update_data(photos="")
    await message.answer("üìû –í–∫–∞–∂—ñ—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–∏ (–¥–æ 200 —Å–∏–º–≤–æ–ª—ñ–≤):")
    await AdForm.next()


@dp.message_handler(content_types=types.ContentTypes.PHOTO, state=AdForm.photos)
async def ad_photos(message: types.Message, state: FSMContext):
    data = await state.get_data()
    photos = data.get("photos", "").split(",") if data.get("photos") else []
    if len(photos) >= 20:
        return await message.answer("‚ùå –ú–∞–∫—Å–∏–º—É–º 20 —Ñ–æ—Ç–æ")
    photos.append(message.photo[-1].file_id)
    await state.update_data(photos=",".join(photos))
    await message.answer("–§–æ—Ç–æ –¥–æ–¥–∞–Ω–æ ‚úÖ. –ú–æ–∂–µ—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —â–µ –∞–±–æ /skip")


@dp.message_handler(state=AdForm.contacts)
async def ad_contacts(message: types.Message, state: FSMContext):
    if len(message.text) > 200:
        return await message.answer("‚ùå –ö–æ–Ω—Ç–∞–∫—Ç–∏ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥—ñ, –º–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª—ñ–≤")

    await state.update_data(contacts=message.text)
    data = await state.get_data()

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –ë–î
    cursor.execute("""
        INSERT INTO ads (user_id, category, district, title, description, photos, contacts)
        VALUES (?, ?, ?, ?, ?, ?, ?)
    """, (
        message.from_user.id,
        data["category"],
        data["district"],
        data["title"],
        data["description"],
        data.get("photos", ""),
        data["contacts"]
    ))
    conn.commit()
    ad_id = cursor.lastrowid

    # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç
    ad_text = (
        f"üì¢ –ù–û–í–ï –û–ì–û–õ–û–®–ï–ù–ù–Ø #{ad_id}\n\n"
        f"üîπ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {data['category']}\n"
        f"üìç –†–∞–π–æ–Ω: {data['district']}\n"
        f"üè∑ –ó–∞–≥–æ–ª–æ–≤–æ–∫: {data['title']}\n"
        f"üìù –û–ø–∏—Å: {data['description']}\n"
        f"üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏: {data['contacts']}\n"
    )

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤ –≥—Ä—É–ø—É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ñ–≤
    if data.get("photos"):
        photos = data["photos"].split(",")
        media = [InputMediaPhoto(media=p) for p in photos]
        media[0].caption = ad_text
        msg = await bot.send_media_group(MODERATORS_CHAT_ID, media=media)
        # –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–∫—Ä—ñ–ø–ª—é—î–º–æ –æ–∫—Ä–µ–º–æ
        sent = await bot.send_message(MODERATORS_CHAT_ID, f"‚¨ÜÔ∏è –û–≥–æ–ª–æ—à–µ–Ω–Ω—è #{ad_id}", reply_markup=get_moder_keyboard(ad_id))
        moder_message_id = sent.message_id
    else:
        msg = await bot.send_message(MODERATORS_CHAT_ID, ad_text, reply_markup=get_moder_keyboard(ad_id))
        moder_message_id = msg.message_id

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ message_id –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
    cursor.execute("UPDATE ads SET moder_message_id=? WHERE id=?", (moder_message_id, ad_id))
    conn.commit()

    await message.answer("‚úÖ –í–∞—à–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é")
    await state.finish()


# -------------------
# –ú–æ–¥–µ—Ä–∞—Ü—ñ—è: –ü—É–±–ª—ñ–∫–∞—Ü—ñ—è
# -------------------
@dp.callback_query_handler(lambda c: c.data.startswith("publish_"))
async def process_publish(callback_query: types.CallbackQuery):
    ad_id = int(callback_query.data.split("_")[1])

    cursor.execute("UPDATE ads SET is_published=1 WHERE id=?", (ad_id,))
    conn.commit()

    cursor.execute("SELECT * FROM ads WHERE id=?", (ad_id,))
    ad = cursor.fetchone()
    columns = [desc[0] for desc in cursor.description]
    ad_dict = dict(zip(columns, ad))

    ad_text = (
        f"üì¢ –û–ì–û–õ–û–®–ï–ù–ù–Ø\n\n"
        f"üîπ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {ad_dict['category']}\n"
        f"üìç –†–∞–π–æ–Ω: {ad_dict['district']}\n"
        f"üè∑ –ó–∞–≥–æ–ª–æ–≤–æ–∫: {ad_dict['title']}\n"
        f"üìù –û–ø–∏—Å: {ad_dict['description']}\n"
        f"üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏: {ad_dict['contacts']}\n"
    )

    if ad_dict["photos"]:
        photos = ad_dict["photos"].split(",")
        media = [InputMediaPhoto(media=p) for p in photos]
        media[0].caption = ad_text
        await bot.send_media_group(PUBLISH_CHAT_ID, media=media)
    else:
        await bot.send_message(PUBLISH_CHAT_ID, ad_text)

    try:
        await bot.delete_message(MODERATORS_CHAT_ID, ad_dict["moder_message_id"])
    except:
        pass

    await callback_query.answer("–û–≥–æ–ª–æ—à–µ–Ω–Ω—è –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ ‚úÖ")


# -------------------
# –ú–æ–¥–µ—Ä–∞—Ü—ñ—è: –í—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è
# -------------------
@dp.callback_query_handler(lambda c: c.data.startswith("reject_"))
async def process_reject(callback_query: types.CallbackQuery, state: FSMContext):
    ad_id = int(callback_query.data.split("_")[1])
    await state.update_data(ad_id=ad_id)
    await RejectAd.waiting_reason.set()
    await bot.send_message(callback_query.message.chat.id, f"–í–≤–µ–¥—ñ—Ç—å –ø—Ä–∏—á–∏–Ω—É –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è #{ad_id}:")
    await callback_query.answer("–û—á—ñ–∫—É—é –ø—Ä–∏—á–∏–Ω—É...")


@dp.message_handler(state=RejectAd.waiting_reason, content_types=types.ContentTypes.TEXT)
async def reject_reason(message: types.Message, state: FSMContext):
    data = await state.get_data()
    ad_id = data["ad_id"]
    reason = message.text.strip()

    cursor.execute("UPDATE ads SET is_rejected=1, rejection_reason=? WHERE id=?", (reason, ad_id))
    conn.commit()

    cursor.execute("SELECT user_id, moder_message_id FROM ads WHERE id=?", (ad_id,))
    row = cursor.fetchone()
    user_id, moder_message_id = row

    await bot.send_message(user_id, f"‚ùå –í–∞—à–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è #{ad_id} –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}")

    try:
        await bot.delete_message(MODERATORS_CHAT_ID, moder_message_id)
    except:
        pass

    await message.answer(f"–ü—Ä–∏—á–∏–Ω—É –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è #{ad_id} –∑–±–µ—Ä–µ–∂–µ–Ω–æ ‚úÖ")
    await state.finish()


# -------------------
# FastAPI endpoint
# -------------------
@app.get("/ads")
async def get_ads():
    cursor.execute("SELECT * FROM ads")
    ads = cursor.fetchall()
    columns = [desc[0] for desc in cursor.description]
    return {"ads": [dict(zip(columns, ad)) for ad in ads]}


# -------------------
# –ó–∞–ø—É—Å–∫
# -------------------
if __name__ == "__main__":
    import asyncio
    from aiogram import executor

    loop = asyncio.get_event_loop()

    async def start_bot():
        executor.start_polling(dp, skip_updates=True)

    async def start_api():
        config = uvicorn.Config(app, host="0.0.0.0", port=int(os.getenv("PORT", 8000)))
        server = uvicorn.Server(config)
        await server.serve()

    loop.create_task(start_bot())
    loop.run_until_complete(start_api())