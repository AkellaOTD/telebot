import os
from fastapi import FastAPI, Request
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.utils.executor import start_webhook
import sqlite3
from fastapi.responses import JSONResponse

# -------------------------------
# üîπ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
# -------------------------------
API_TOKEN = os.getenv("BOT_TOKEN", "YOUR_TELEGRAM_BOT_TOKEN")

WEBHOOK_HOST = os.getenv('WEBHOOK_HOST')  # –∑–∞–º—ñ–Ω–∏ –Ω–∞ —Å–≤—ñ–π –¥–æ–º–µ–Ω
WEBHOOK_PATH = os.getenv('WEBHOOK_PATH')
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

WEBAPP_HOST = os.getenv('WEBAPP_HOST')
WEBAPP_PORT = os.getenv('PORT')

# -------------------------------
# üîπ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö (SQLite)
# -------------------------------
conn = sqlite3.connect("bot.db", check_same_thread=False)
cursor = conn.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    accepted_rules BOOLEAN
)
""")
cursor.execute("""
CREATE TABLE IF NOT EXISTS ads (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    category TEXT,
    district TEXT,
    title TEXT,
    description TEXT,
    photos TEXT,
    contacts TEXT
)
""")
conn.commit()

# -------------------------------
# üîπ FSM —Å—Ç–∞–Ω–∏ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è
# -------------------------------
class AdForm(StatesGroup):
    category = State()
    district = State()
    title = State()
    description = State()
    photos = State()
    contacts = State()

# -------------------------------
# üîπ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
# -------------------------------
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
app = FastAPI()

# -------------------------------
# üîπ /start –∫–æ–º–∞–Ω–¥–∞
# -------------------------------
@dp.message_handler(commands="start")
async def cmd_start(message: types.Message):
    cursor.execute("SELECT accepted_rules FROM users WHERE user_id = ?", (message.from_user.id,))
    user = cursor.fetchone()

    if user and user[0]:  # –Ø–∫—â–æ –≤–∂–µ –ø–æ–≥–æ–¥–∏–≤—Å—è
        await message.answer("‚úÖ –í–∏ –≤–∂–µ –ø–æ–≥–æ–¥–∏–ª–∏—Å—å —ñ–∑ –ø—Ä–∞–≤–∏–ª–∞–º–∏!\n–ì–æ—Ç–æ–≤—ñ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è?")
        await message.answer("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /create —â–æ–± –ø–æ—á–∞—Ç–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è")
    else:
        kb = ReplyKeyboardMarkup(resize_keyboard=True)
        kb.add(KeyboardButton("‚úÖ –ü–æ–≥–æ–¥–∂—É—é—Å—å"), KeyboardButton("‚ùå –ù–µ –ø–æ–≥–æ–¥–∂—É—é—Å—å"))
        await message.answer("üìú –ü—Ä–∞–≤–∏–ª–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:\n\n1. ...\n2. ...\n3. ...\n\n–í–∏ –ø–æ–≥–æ–¥–∂—É—î—Ç–µ—Å—å?", reply_markup=kb)

# -------------------------------
# üîπ –û–±—Ä–æ–±–∫–∞ –∑–≥–æ–¥–∏ / –≤—ñ–¥–º–æ–≤–∏
# -------------------------------
@dp.message_handler(lambda m: m.text in ["‚úÖ –ü–æ–≥–æ–¥–∂—É—é—Å—å", "‚ùå –ù–µ –ø–æ–≥–æ–¥–∂—É—é—Å—å"])
async def process_rules(message: types.Message):
    if message.text == "‚úÖ –ü–æ–≥–æ–¥–∂—É—é—Å—å":
        cursor.execute("INSERT OR REPLACE INTO users (user_id, accepted_rules) VALUES (?, ?)", (message.from_user.id, True))
        conn.commit()
        await message.answer("–î—è–∫—É—î–º–æ! ‚úÖ –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è.\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /create", reply_markup=ReplyKeyboardRemove())
    else:
        await message.answer("üëã –î–æ–±—Ä–µ, –¥–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!", reply_markup=ReplyKeyboardRemove())
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)

# -------------------------------
# üîπ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è (FSM)
# -------------------------------
@dp.message_handler(commands="create")
async def cmd_create(message: types.Message):
    cursor.execute("SELECT accepted_rules FROM users WHERE user_id = ?", (message.from_user.id,))
    user = cursor.fetchone()
    if not user or not user[0]:
        await message.answer("‚ö†Ô∏è –°–ø–æ—á–∞—Ç–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–æ–≥–æ–¥–∏—Ç–∏—Å—è –∑ –ø—Ä–∞–≤–∏–ª–∞–º–∏! –ù–∞–ø–∏—à—ñ—Ç—å /start")
        return

    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("–ü—Ä–æ–¥–∞–º", "–ö—É–ø–ª—é", "–ü–æ—Å–ª—É–≥–∏", "–Ü–Ω—à–µ")
    await message.answer("üîé –û–±–µ—Ä—ñ—Ç—å —Ç–µ–º–∞—Ç–∏–∫—É –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è:", reply_markup=kb)
    await AdForm.category.set()

@dp.message_handler(state=AdForm.category)
async def process_category(message: types.Message, state: FSMContext):
    await state.update_data(category=message.text)
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("–¶–µ–Ω—Ç—Ä", "–ü—ñ–≤–Ω—ñ—á", "–ü—ñ–≤–¥–µ–Ω—å", "–°—Ö—ñ–¥", "–ó–∞—Ö—ñ–¥")
    await message.answer("üìç –û–±–µ—Ä—ñ—Ç—å —Ä–∞–π–æ–Ω:", reply_markup=kb)
    await AdForm.next()

@dp.message_handler(state=AdForm.district)
async def process_district(message: types.Message, state: FSMContext):
    await state.update_data(district=message.text)
    await message.answer("‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–¥–æ 200 —Å–∏–º–≤–æ–ª—ñ–≤):", reply_markup=ReplyKeyboardRemove())
    await AdForm.next()

@dp.message_handler(state=AdForm.title)
async def process_title(message: types.Message, state: FSMContext):
    if len(message.text) > 200:
        await message.answer("‚ùå –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ (–º–∞–∫—Å 200 —Å–∏–º–≤–æ–ª—ñ–≤).")
        return
    await state.update_data(title=message.text)
    await message.answer("üìù –í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å (–¥–æ 2000 —Å–∏–º–≤–æ–ª—ñ–≤):")
    await AdForm.next()

@dp.message_handler(state=AdForm.description)
async def process_description(message: types.Message, state: FSMContext):
    if len(message.text) > 2000:
        await message.answer("‚ùå –û–ø–∏—Å –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ (–º–∞–∫—Å 2000 —Å–∏–º–≤–æ–ª—ñ–≤).")
        return
    await state.update_data(description=message.text)
    await message.answer("üì∏ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ (–¥–æ 20 —à—Ç). –Ø–∫—â–æ —Ñ–æ—Ç–æ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ ‚Äî –Ω–∞–ø–∏—à—ñ—Ç—å '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏'.")
    await AdForm.next()

@dp.message_handler(content_types=["photo", "text"], state=AdForm.photos)
async def process_photos(message: types.Message, state: FSMContext):
    if message.content_type == "text" and message.text.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏":
        await state.update_data(photos=None)
    else:
        photos = []
        if message.photo:
            photos.append(message.photo[-1].file_id)
        await state.update_data(photos=",".join(photos))

    await message.answer("üìû –í–≤–µ–¥—ñ—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é (–¥–æ 200 —Å–∏–º–≤–æ–ª—ñ–≤):")
    await AdForm.next()

@dp.message_handler(state=AdForm.contacts)
async def process_contacts(message: types.Message, state: FSMContext):
    if len(message.text) > 200:
        await message.answer("‚ùå –ö–æ–Ω—Ç–∞–∫—Ç–∏ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥—ñ. –ú–∞–∫—Å 200 —Å–∏–º–≤–æ–ª—ñ–≤.")
        return
    await state.update_data(contacts=message.text)

    data = await state.get_data()
    cursor.execute("""
        INSERT INTO ads (user_id, category, district, title, description, photos, contacts)
        VALUES (?, ?, ?, ?, ?, ?, ?)
    """, (
        message.from_user.id,
        data["category"],
        data["district"],
        data["title"],
        data["description"],
        data["photos"],
        data["contacts"]
    ))
    conn.commit()

    await message.answer("‚úÖ –û–≥–æ–ª–æ—à–µ–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ!", reply_markup=ReplyKeyboardRemove())
    await state.finish()

# -------------------------------
# üîπ Webhook –¥–ª—è FastAPI
# -------------------------------
@app.post(WEBHOOK_PATH)
async def webhook(request: Request):
    update = types.Update(**await request.json())
    await dp.process_update(update)

# -------------------------------
# üîπ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
# -------------------------------
async def on_startup(dp):
    await bot.set_webhook(WEBHOOK_URL)

async def on_shutdown(dp):
    await bot.delete_webhook()


# -------------------------------
# üîπ –í–∏–≤–µ–¥–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
# -------------------------------
@app.get("/users")
async def get_users():
    cursor.execute("SELECT user_id, accepted_rules FROM users")
    rows = cursor.fetchall()
    users = [{"user_id": r[0], "accepted_rules": bool(r[1])} for r in rows]
    return JSONResponse(content=users)

# -------------------------------
# üîπ –í–∏–≤–µ–¥–µ–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω—å
# -------------------------------
@app.get("/ads")
async def get_ads():
    cursor.execute("SELECT id, user_id, category, district, title, description, photos, contacts FROM ads")
    rows = cursor.fetchall()
    ads = [
        {
            "id": r[0],
            "user_id": r[1],
            "category": r[2],
            "district": r[3],
            "title": r[4],
            "description": r[5],
            "photos": r[6].split(",") if r[6] else [],
            "contacts": r[7]
        }
        for r in rows
    ]
    return JSONResponse(content=ads)

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host=WEBAPP_HOST, port=WEBAPP_PORT)