import os
import sqlite3
from fastapi import FastAPI, Request
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, ReplyKeyboardRemove

# -------------------------------
# üîπ –ö–æ–Ω—Ñ—ñ–≥ –∑ ENV
# -------------------------------
BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_HOST = os.getenv("WEBHOOK_HOST")  # https://mybot.onrender.com
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"
WEBAPP_HOST = "0.0.0.0"
WEBAPP_PORT = int(os.getenv("PORT", 8000))

# -------------------------------
# üîπ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
# -------------------------------
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
app = FastAPI()

# -------------------------------
# üîπ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö
# -------------------------------
conn = sqlite3.connect("database.db", check_same_thread=False)
cursor = conn.cursor()

cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    accepted_rules BOOLEAN DEFAULT 0
)
""")
cursor.execute("""
CREATE TABLE IF NOT EXISTS ads (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    category TEXT,
    district TEXT,
    title TEXT,
    description TEXT,
    photos TEXT,
    contacts TEXT
)
""")
conn.commit()

# -------------------------------
# üîπ –°—Ç–∞–Ω –º–∞—à–∏–Ω–∏ –¥–ª—è –æ–≥–æ–ª–æ—à–µ–Ω—å
# -------------------------------
class AdForm(StatesGroup):
    category = State()
    district = State()
    title = State()
    description = State()
    photos = State()
    contacts = State()

# -------------------------------
# üîπ –•–µ–Ω–¥–ª–µ—Ä /start
# -------------------------------
@dp.message_handler(commands="start")
async def cmd_start(message: types.Message):
    cursor.execute("SELECT accepted_rules FROM users WHERE user_id = ?", (message.from_user.id,))
    user = cursor.fetchone()

    if not user:
        cursor.execute("INSERT INTO users (user_id, accepted_rules) VALUES (?, 0)", (message.from_user.id,))
        conn.commit()
        kb = ReplyKeyboardMarkup(resize_keyboard=True)
        kb.add("‚úÖ –ü–æ–≥–æ–¥–∂—É—é—Å—å", "‚ùå –ù–µ –ø–æ–≥–æ–¥–∂—É—é—Å—å")
        await message.answer(
            "üìú –ü—Ä–∞–≤–∏–ª–∞:\n\n1. –ù–µ –ø–æ—Ä—É—à—É–π—Ç–µ –∑–∞–∫–æ–Ω\n2. –ù–µ –ø—É–±–ª—ñ–∫—É–π—Ç–µ —Å–ø–∞–º\n\n–í–∏ –ø–æ–≥–æ–¥–∂—É—î—Ç–µ—Å—å?",
            reply_markup=kb
        )
    elif not user[0]:
        kb = ReplyKeyboardMarkup(resize_keyboard=True)
        kb.add("‚úÖ –ü–æ–≥–æ–¥–∂—É—é—Å—å", "‚ùå –ù–µ –ø–æ–≥–æ–¥–∂—É—é—Å—å")
        await message.answer("–í–∏ —â–µ –Ω–µ –ø–æ–≥–æ–¥–∏–ª–∏—Å—å —ñ–∑ –ø—Ä–∞–≤–∏–ª–∞–º–∏. –ü–æ–≥–æ–¥–∂—É—î—Ç–µ—Å—å?", reply_markup=kb)
    else:
        await message.answer("–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ! –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /create –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è.", reply_markup=ReplyKeyboardRemove())

# -------------------------------
# üîπ –û–±—Ä–æ–±–∫–∞ –ø–æ–≥–æ–¥–∂–µ–Ω–Ω—è –ø—Ä–∞–≤–∏–ª
# -------------------------------
@dp.message_handler(lambda m: m.text in ["‚úÖ –ü–æ–≥–æ–¥–∂—É—é—Å—å", "‚ùå –ù–µ –ø–æ–≥–æ–¥–∂—É—é—Å—å"])
async def process_rules(message: types.Message):
    if message.text == "‚úÖ –ü–æ–≥–æ–¥–∂—É—é—Å—å":
        cursor.execute("UPDATE users SET accepted_rules = 1 WHERE user_id = ?", (message.from_user.id,))
        conn.commit()
        await message.answer("‚úÖ –î—è–∫—É—é! –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –∫–æ–º–∞–Ω–¥–æ—é /create", reply_markup=ReplyKeyboardRemove())
    else:
        cursor.execute("DELETE FROM users WHERE user_id = ?", (message.from_user.id,))
        conn.commit()
        await message.answer("üëã –í–∏ –≤—ñ–¥–º–æ–≤–∏–ª–∏—Å—å –≤—ñ–¥ –ø—Ä–∞–≤–∏–ª. –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!", reply_markup=ReplyKeyboardRemove())

# -------------------------------
# üîπ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è /create
# -------------------------------
@dp.message_handler(commands="create")
async def cmd_create(message: types.Message, state: FSMContext):
    cursor.execute("SELECT accepted_rules FROM users WHERE user_id = ?", (message.from_user.id,))
    user = cursor.fetchone()

    if not user or not user[0]:
        await message.answer("‚ö†Ô∏è –°–ø–µ—Ä—à—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–æ–≥–æ–¥–∏—Ç–∏—Å—å —ñ–∑ –ø—Ä–∞–≤–∏–ª–∞–º–∏! –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /start")
        return

    await AdForm.category.set()
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üè† –ù–µ—Ä—É—Ö–æ–º—ñ—Å—Ç—å", "üöó –ê–≤—Ç–æ", "üì± –ï–ª–µ–∫—Ç—Ä–æ–Ω—ñ–∫–∞", "üëî –†–æ–±–æ—Ç–∞")
    await message.answer("–û–±–µ—Ä—ñ—Ç—å —Ç–µ–º–∞—Ç–∏–∫—É –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è:", reply_markup=kb)

@dp.message_handler(state=AdForm.category)
async def process_category(message: types.Message, state: FSMContext):
    await state.update_data(category=message.text)
    await AdForm.next()
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("–¶–µ–Ω—Ç—Ä", "–õ—ñ–≤–∏–π –±–µ—Ä–µ–≥", "–ü—Ä–∞–≤–∏–π –±–µ—Ä–µ–≥")
    await message.answer("–û–±–µ—Ä—ñ—Ç—å —Ä–∞–π–æ–Ω:", reply_markup=kb)

@dp.message_handler(state=AdForm.district)
async def process_district(message: types.Message, state: FSMContext):
    await state.update_data(district=message.text)
    await AdForm.next()
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–¥–æ 200 —Å–∏–º–≤–æ–ª—ñ–≤):", reply_markup=ReplyKeyboardRemove())

@dp.message_handler(state=AdForm.title)
async def process_title(message: types.Message, state: FSMContext):
    if len(message.text) > 200:
        await message.answer("‚ùå –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π (–º–∞–∫—Å 200 —Å–∏–º–≤–æ–ª—ñ–≤)")
        return
    await state.update_data(title=message.text)
    await AdForm.next()
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å (–¥–æ 2000 —Å–∏–º–≤–æ–ª—ñ–≤):")

@dp.message_handler(state=AdForm.description)
async def process_description(message: types.Message, state: FSMContext):
    if len(message.text) > 2000:
        await message.answer("‚ùå –û–ø–∏—Å –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π (–º–∞–∫—Å 2000 —Å–∏–º–≤–æ–ª—ñ–≤)")
        return
    await state.update_data(description=message.text)
    await AdForm.next()
    await message.answer("–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ (–¥–æ 20 —à—Ç). –Ø–∫—â–æ –±–µ–∑ —Ñ–æ—Ç–æ ‚Äî –Ω–∞–ø–∏—à—ñ—Ç—å '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏'.")

@dp.message_handler(content_types=["photo", "text"], state=AdForm.photos)
async def process_photos(message: types.Message, state: FSMContext):
    data = await state.get_data()
    photos = data.get("photos", "")

    if message.content_type == "photo":
        file_id = message.photo[-1].file_id
        photos = (photos + "," + file_id).strip(",")
        await state.update_data(photos=photos)
        await message.answer("–§–æ—Ç–æ –¥–æ–¥–∞–Ω–æ ‚úÖ –ú–æ–∂–µ—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —â–µ –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å '–ì–æ—Ç–æ–≤–æ'.")
    elif message.text.lower() in ["–≥–æ—Ç–æ–≤–æ", "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏"]:
        await AdForm.next()
        await message.answer("–í–≤–µ–¥—ñ—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é (–¥–æ 200 —Å–∏–º–≤–æ–ª—ñ–≤):")

@dp.message_handler(state=AdForm.contacts)
async def process_contacts(message: types.Message, state: FSMContext):
    if len(message.text) > 200:
        await message.answer("‚ùå –ö–æ–Ω—Ç–∞–∫—Ç–∏ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥—ñ (–º–∞–∫—Å 200 —Å–∏–º–≤–æ–ª—ñ–≤)")
        return

    await state.update_data(contacts=message.text)
    data = await state.get_data()

    cursor.execute("""
        INSERT INTO ads (user_id, category, district, title, description, photos, contacts)
        VALUES (?, ?, ?, ?, ?, ?, ?)
    """, (
        message.from_user.id,
        data["category"],
        data["district"],
        data["title"],
        data["description"],
        data.get("photos", ""),
        data["contacts"]
    ))
    conn.commit()

    await message.answer("‚úÖ –í–∞—à–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ!", reply_markup=ReplyKeyboardRemove())
    await state.finish()

# -------------------------------
# üîπ FastAPI routes
# -------------------------------
@app.on_event("startup")
async def on_startup():
    await bot.set_webhook(WEBHOOK_URL)

@app.on_event("shutdown")
async def on_shutdown():
    await bot.delete_webhook()
    await dp.storage.close()
    await dp.storage.wait_closed()

@app.post(WEBHOOK_PATH)
async def webhook(request: Request):
    data = await request.json()
    update = types.Update.to_object(data)

    # üî• –§—ñ–∫—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
    from aiogram import Bot, Dispatcher
    Bot.set_current(bot)
    Dispatcher.set_current(dp)

    await dp.process_update(update)
    return {"ok": True}

@app.get("/users")
async def get_users():
    cursor.execute("SELECT * FROM users")
    return {"users": cursor.fetchall()}

@app.get("/ads")
async def get_ads():
    cursor.execute("SELECT * FROM ads")
    rows = cursor.fetchall()
    columns = [desc[0] for desc in cursor.description]  # —ñ–º–µ–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
    ads = [dict(zip(columns, row)) for row in rows]     # —Ä–æ–±–∏–º–æ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–Ω–∏–∫—ñ–≤
    return {"ads": ads}