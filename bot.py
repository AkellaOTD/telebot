from fastapi import HTTPException
import os
import re
import sqlite3
from fastapi import FastAPI, Request
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, ReplyKeyboardRemove
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import uvicorn


# -------------------------------
# üîπ –ö–æ–Ω—Ñ—ñ–≥
# -------------------------------
TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_HOST = os.getenv("WEBHOOK_HOST")
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
app = FastAPI()

# -------------------------------
# üîπ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö
# -------------------------------
conn = sqlite3.connect("bot.db", check_same_thread=False)
cursor = conn.cursor()

cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER UNIQUE,
    accepted_rules BOOLEAN
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS ads (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    category TEXT,
    district TEXT,
    title TEXT,
    description TEXT,
    photos TEXT,
    contacts TEXT,
    is_published INTEGER DEFAULT 0,
    is_rejected INTEGER DEFAULT 0,
    rejection_reason TEXT,
    moder_message_id INTEGER
)
""")
conn.commit()

# -------------------------------
# üîπ FSM
# -------------------------------


class AdForm(StatesGroup):
    category = State()
    district = State()
    title = State()
    description = State()
    photos = State()
    contacts = State()


# -------------------------------
# üîπ –§—ñ–ª—å—Ç—Ä —Ç–µ–∫—Å—Ç—É
# -------------------------------
BANNED_WORDS = ["—Å–ø–∞–º", "—à–∞—Ö—Ä–∞–π—Å—Ç–≤–æ", "–ª–æ—Ö–æ—Ç—Ä–æ–Ω", "–æ–±–º–∞–Ω", "scam", "fraud"]


def validate_input(text: str) -> tuple[bool, str]:
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–µ–∫—Å—Ç—É –Ω–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è —ñ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω—ñ —Å–ª–æ–≤–∞"""
    if re.search(r"(http[s]?://|www\.|t\.me/)", text, re.IGNORECASE):
        return False, "‚ùå –¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è!"
    lowered = text.lower()
    for word in BANNED_WORDS:
        if word in lowered:
            return False, f"‚ùå –¢–µ–∫—Å—Ç –º—ñ—Å—Ç–∏—Ç—å –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–µ —Å–ª–æ–≤–æ: {word}"
    return True, ""

# -------------------------------
# üîπ /start
# -------------------------------


@dp.message_handler(commands="start")
async def cmd_start(message: types.Message):
    cursor.execute(
        "SELECT accepted_rules FROM users WHERE user_id = ?", (message.from_user.id,))
    user = cursor.fetchone()

    if user and user[0]:
        await message.answer("‚úÖ –í–∏ –≤–∂–µ –ø–æ–≥–æ–¥–∏–ª–∏—Å—å –∑ –ø—Ä–∞–≤–∏–ª–∞–º–∏! –ú–æ–∂–µ—Ç–µ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –∫–æ–º–∞–Ω–¥–æ—é /create")
        return

    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("‚úÖ –ü–æ–≥–æ–¥–∂—É—é—Å—å", "‚ùå –ù–µ –ø–æ–≥–æ–¥–∂—É—é—Å—å")
    await message.answer("üìú –ü—Ä–∞–≤–∏–ª–∞:\n1. –ë–µ–∑ –ø–æ—Å–∏–ª–∞–Ω—å.\n2. –ë–µ–∑ —Å–ø–∞–º—É.\n3. –ó–∞–±–æ—Ä–æ–Ω–µ–Ω—ñ —Å–ª–æ–≤–∞ –Ω–µ –¥–æ–ø—É—Å–∫–∞—é—Ç—å—Å—è.\n\n–í–∏ –ø–æ–≥–æ–¥–∂—É—î—Ç–µ—Å—å?",
                         reply_markup=kb)


@dp.message_handler(lambda msg: msg.text in ["‚úÖ –ü–æ–≥–æ–¥–∂—É—é—Å—å", "‚ùå –ù–µ –ø–æ–≥–æ–¥–∂—É—é—Å—å"])
async def rules_answer(message: types.Message):
    if message.text == "‚úÖ –ü–æ–≥–æ–¥–∂—É—é—Å—å":
        cursor.execute(
            "INSERT OR REPLACE INTO users (user_id, accepted_rules) VALUES (?, ?)", (message.from_user.id, True))
        conn.commit()
        await message.answer("‚úÖ –î—è–∫—É—î–º–æ! –¢–µ–ø–µ—Ä –º–æ–∂–µ—Ç–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –∫–æ–º–∞–Ω–¥–æ—é /create", reply_markup=ReplyKeyboardRemove())
    else:
        await message.answer("üëã –î–æ–±—Ä–µ, –¥–æ –∑—É—Å—Ç—Ä—ñ—á—ñ!", reply_markup=ReplyKeyboardRemove())

# -------------------------------
# üîπ /create (FSM)
# -------------------------------


@dp.message_handler(commands="create")
async def cmd_create(message: types.Message, state: FSMContext):
    cursor.execute(
        "SELECT accepted_rules FROM users WHERE user_id = ?", (message.from_user.id,))
    user = cursor.fetchone()
    if not user or not user[0]:
        await message.answer("‚ö†Ô∏è –°–ø–µ—Ä—à—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–æ–≥–æ–¥–∏—Ç–∏—Å—å —ñ–∑ –ø—Ä–∞–≤–∏–ª–∞–º–∏! –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /start")
        return

    await AdForm.category.set()
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("–í—ñ–¥–¥–∞–º —Ç–≤–∞—Ä–∏–Ω—É", "–ü—Ä–æ–¥–∞–º —Ç–≤–∞—Ä–∏–Ω—É", "–ó–Ω–∞–π–¥–µ–Ω–∞ —Ç–≤–∞—Ä–∏–Ω–∞",
           "–ó–∞–≥—É–±–ª–µ–Ω–∞ —Ç–≤–∞—Ä–∏–Ω–∞", "–ü–æ—Ç—Ä—ñ–±–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞ ")
    await message.answer("–û–±–µ—Ä—ñ—Ç—å —Ç–µ–º–∞—Ç–∏–∫—É –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è:", reply_markup=kb)


@dp.message_handler(state=AdForm.category)
async def process_category(message: types.Message, state: FSMContext):
    await state.update_data(category=message.text)
    await AdForm.next()
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("–¶–µ–Ω—Ç—Ä", "–õ—ñ–≤–∏–π –±–µ—Ä–µ–≥", "–ü—Ä–∞–≤–∏–π –±–µ—Ä–µ–≥")
    await message.answer("–û–±–µ—Ä—ñ—Ç—å —Ä–∞–π–æ–Ω:", reply_markup=kb)


@dp.message_handler(state=AdForm.district)
async def process_district(message: types.Message, state: FSMContext):
    await state.update_data(district=message.text)
    await AdForm.next()
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–¥–æ 200 —Å–∏–º–≤–æ–ª—ñ–≤):", reply_markup=ReplyKeyboardRemove())


@dp.message_handler(state=AdForm.title)
async def process_title(message: types.Message, state: FSMContext):
    if len(message.text) > 200:
        await message.answer("‚ùå –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π (–º–∞–∫—Å 200 —Å–∏–º–≤–æ–ª—ñ–≤)")
        return
    valid, error = validate_input(message.text)
    if not valid:
        await message.answer(error)
        return
    await state.update_data(title=message.text)
    await AdForm.next()
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å (–¥–æ 2000 —Å–∏–º–≤–æ–ª—ñ–≤):")


@dp.message_handler(state=AdForm.description)
async def process_description(message: types.Message, state: FSMContext):
    if len(message.text) > 2000:
        await message.answer("‚ùå –û–ø–∏—Å –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π (–º–∞–∫—Å 2000 —Å–∏–º–≤–æ–ª—ñ–≤)")
        return
    valid, error = validate_input(message.text)
    if not valid:
        await message.answer(error)
        return
    await state.update_data(description=message.text)
    await AdForm.next()
    await message.answer("–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ (–¥–æ 20 —à—Ç). –Ø–∫—â–æ –±–µ–∑ —Ñ–æ—Ç–æ ‚Äî –Ω–∞–ø–∏—à—ñ—Ç—å '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏'.")


@dp.message_handler(content_types=["photo", "text"], state=AdForm.photos)
async def process_photos(message: types.Message, state: FSMContext):
    data = await state.get_data()
    photos = data.get("photos", "")
    if message.content_type == "photo":
        file_id = message.photo[-1].file_id
        photos = (photos + "," + file_id).strip(",")
        await state.update_data(photos=photos)
        await message.answer("–§–æ—Ç–æ –¥–æ–¥–∞–Ω–æ ‚úÖ –ú–æ–∂–µ—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —â–µ –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å '–ì–æ—Ç–æ–≤–æ'.")
    elif message.text.lower() in ["–≥–æ—Ç–æ–≤–æ", "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏"]:
        await AdForm.next()
        await message.answer("–í–≤–µ–¥—ñ—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é (–¥–æ 200 —Å–∏–º–≤–æ–ª—ñ–≤):")


@dp.message_handler(state=AdForm.contacts)
async def process_contacts(message: types.Message, state: FSMContext):
    if len(message.text) > 200:
        await message.answer("‚ùå –ö–æ–Ω—Ç–∞–∫—Ç–∏ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥—ñ (–º–∞–∫—Å 200 —Å–∏–º–≤–æ–ª—ñ–≤)")
        return
    valid, error = validate_input(message.text)
    if not valid:
        await message.answer(error)
        return

    await state.update_data(contacts=message.text)
    data = await state.get_data()
    cursor.execute("""
    INSERT INTO ads (
        user_id, category, district, title, description, photos, contacts,
        is_published, is_rejected, rejection_reason
    )
    VALUES (?, ?, ?, ?, ?, ?, ?, 0, 0, NULL)
""", (
        message.from_user.id,
        data["category"],
        data["district"],
        data["title"],
        data["description"],
        data.get("photos", ""),
        data["contacts"]
    ))
    conn.commit()
    await message.answer("‚úÖ –í–∞—à–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")
    await state.finish()

cursor.execute("SELECT last_insert_rowid()")
ad_id = cursor.fetchone()[0]

# -------------------------------
# üîπ FastAPI endpoints
# -------------------------------


@app.on_event("startup")
async def on_startup():
    await bot.set_webhook(WEBHOOK_URL)


@app.post(WEBHOOK_PATH)
async def webhook(request: Request):
    data = await request.json()
    update = types.Update.to_object(data)
    from aiogram import Bot
    Bot.set_current(bot)
    Dispatcher.set_current(dp)
    await dp.process_update(update)
    return {"ok": True}


@app.get("/ads")
async def get_ads():
    cursor.execute("SELECT * FROM ads")
    rows = cursor.fetchall()
    columns = [desc[0] for desc in cursor.description]
    ads = [dict(zip(columns, row)) for row in rows]
    return {"ads": ads}


@app.get("/ads/{ad_id}")
async def get_ad(ad_id: int):
    cursor.execute("SELECT * FROM ads WHERE id = ?", (ad_id,))
    row = cursor.fetchone()
    if not row:
        raise HTTPException(status_code=404, detail="Ad not found")

    columns = [desc[0] for desc in cursor.description]
    return dict(zip(columns, row))


@app.post("/ads/{ad_id}/publish")
async def publish_ad(ad_id: int):
    cursor.execute("SELECT * FROM ads WHERE id = ?", (ad_id,))
    if not cursor.fetchone():
        raise HTTPException(status_code=404, detail="Ad not found")

    cursor.execute("UPDATE ads SET is_published = 1 WHERE id = ?", (ad_id,))
    conn.commit()
    return {"status": "success", "message": f"Ad {ad_id} published"}


@app.post("/ads/{ad_id}/reject")
async def reject_ad(ad_id: int, reason: str):
    cursor.execute("SELECT * FROM ads WHERE id = ?", (ad_id,))
    if not cursor.fetchone():
        raise HTTPException(status_code=404, detail="Ad not found")

    cursor.execute(
        "UPDATE ads SET is_rejected = 1, rejection_reason = ? WHERE id = ?",
        (reason, ad_id)
    )
    conn.commit()
    return {"status": "success", "message": f"Ad {ad_id} rejected", "reason": reason}


@app.get("/users")
async def get_users():
    cursor.execute("SELECT * FROM users")
    rows = cursor.fetchall()
    columns = [desc[0] for desc in cursor.description]
    users = [dict(zip(columns, row)) for row in rows]
    return {"users": users}


def get_moder_keyboard(ad_id: int):
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("‚úÖ –û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏", callback_data=f"publish_{ad_id}"),
        InlineKeyboardButton("‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"reject_{ad_id}")
    )
    return kb
# –ù–∞–¥—Å–∏–ª–∞—î–º–æ –≤ –≥—Ä—É–ø—É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ñ–≤
    moder_text = (
        f"üì¢ –ù–û–í–ï –û–ì–û–õ–û–®–ï–ù–ù–Ø #{ad_id}\n\n"
        f"üîπ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {data['category']}\n"
        f"üìç –†–∞–π–æ–Ω: {data['district']}\n"
        f"üè∑ –ó–∞–≥–æ–ª–æ–≤–æ–∫: {data['title']}\n"
        f"üìù –û–ø–∏—Å: {data['description']}\n"
        f"üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏: {data['contacts']}\n"
    )

    msg = await bot.send_message(
        chat_id=int(os.getenv("MODERATORS_CHAT_ID")),
        text=moder_text,
        reply_markup=get_moder_keyboard(ad_id)
    )

    cursor.execute("UPDATE ads SET moder_message_id=? WHERE id=?",
                   (msg.message_id, ad_id))
    conn.commit()
    reason = State()
    # -------------------------------


@dp.callback_query_handler(lambda c: c.data.startswith("reject_"))
async def process_reject(callback_query: types.CallbackQuery, state: FSMContext):
    ad_id = int(callback_query.data.split("_")[1])
    await state.update_data(ad_id=ad_id)

    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥—ñ—Ç—å –ø—Ä–∏—á–∏–Ω—É –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è:")
    await RejectAd.reason.set()
    await callback_query.answer()


@dp.callback_query_handler(lambda c: c.data.startswith("publish_"))
async def process_publish(callback_query: types.CallbackQuery):
    ad_id = int(callback_query.data.split("_")[1])

    # –ë–µ—Ä–µ–º–æ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –∑ –ë–î
    cursor.execute(
        "SELECT user_id, category, district, title, description, contacts FROM ads WHERE id=?", (ad_id,))
    ad = cursor.fetchone()

    if not ad:
        await callback_query.answer("–û–≥–æ–ª–æ—à–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ ‚ùå", show_alert=True)
        return

    user_id, category, district, title, description, contacts = ad

    # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å —É –ë–î
    cursor.execute("UPDATE ads SET is_published=1 WHERE id=?", (ad_id,))
    conn.commit()

    # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó
    pub_text = (
        f"üì¢ –û–ì–û–õ–û–®–ï–ù–ù–Ø #{ad_id}\n\n"
        f"üîπ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {category}\n"
        f"üìç –†–∞–π–æ–Ω: {district}\n"
        f"üè∑ –ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}\n"
        f"üìù –û–ø–∏—Å: {description}\n"
        f"üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏: {contacts}\n"
    )

    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ —É –∫–∞–Ω–∞–ª/–≥—Ä—É–ø—É –ø—É–±–ª—ñ–∫–∞—Ü—ñ–π
    await bot.send_message(
        chat_id=int(os.getenv("PUBLISH_CHAT_ID")),
        text=pub_text
    )

    # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∞–≤—Ç–æ—Ä–∞
    await bot.send_message(user_id, "‚úÖ –í–∞—à–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–µ!")

    # –í–∏–¥–∞–ª—è—î–º–æ –∑ –≥—Ä—É–ø–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ñ–≤
    cursor.execute("SELECT moder_message_id FROM ads WHERE id=?", (ad_id,))
    row = cursor.fetchone()
    if row and row[0]:
        try:
            await bot.delete_message(chat_id=int(os.getenv("MODERATORS_CHAT_ID")), message_id=row[0])
        except:
            pass

    await callback_query.answer("–û–≥–æ–ª–æ—à–µ–Ω–Ω—è –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–µ ‚úÖ")


@dp.message_handler(state=RejectAd.reason)
async def save_reject_reason(message: types.Message, state: FSMContext):
    data = await state.get_data()
    ad_id = data["ad_id"]
    reason = message.text

    cursor.execute(
        "UPDATE ads SET is_rejected=1, rejection_reason=? WHERE id=?", (reason, ad_id))
    conn.commit()

    # –û—Ç—Ä–∏–º—É—î–º–æ id –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    cursor.execute("SELECT user_id FROM ads WHERE id=?", (ad_id,))
    user_id = cursor.fetchone()[0]

    await bot.send_message(user_id, f"‚ùå –í–∞—à–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –±—É–ª–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}")

    await message.answer("–û–≥–æ–ª–æ—à–µ–Ω–Ω—è –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ ‚úÖ")
    await state.finish()
# -------------------------------
# üîπ –õ–æ–∫–∞–ª—å–Ω–∏–π –∑–∞–ø—É—Å–∫ (dev)
# -------------------------------
if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=int(os.getenv("PORT", 8000)))
