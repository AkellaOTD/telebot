import os
import asyncio
import threading
from flask import Flask, request, abort
from aiogram import Bot, Dispatcher
from aiogram.types import Update
from dotenv import load_dotenv

load_dotenv()

TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_PATH = os.getenv("WEBHOOK_PATH", "/webhook")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: https://yourdomain.com

app = Flask(__name__)

bot = Bot(token=TOKEN)
dp = Dispatcher()


# === –ü—Ä–∏–∫–ª–∞–¥ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ö–µ–Ω–¥–ª–µ—Ä–∞ ===
@dp.message()
async def echo_handler(message):
    await message.answer(f"Echo: {message}")


loop = asyncio.get_event_loop()

@app.post(WEBHOOK_PATH)
def webhook():
    if not request.is_json:
        abort(400)
    data = request.get_json(force=True)
    update = Update.model_validate(data)
    asyncio.run_coroutine_threadsafe(dp.feed_update(bot, update), loop)
    return {"ok": True}


async def on_startup():
    """–í–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ, —Ä–µ—î—Å—Ç—Ä—É—î webhook —É Telegram"""
    if WEBHOOK_URL:
        full_url = WEBHOOK_URL.rstrip("/") + WEBHOOK_PATH
        await bot.set_webhook(full_url)
        print(f"‚úÖ Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {full_url}")


async def on_shutdown():
    await bot.delete_webhook()
    await bot.session.close()
    print("üõë Webhook –≤–∏–¥–∞–ª–µ–Ω–æ, —Å–µ—Å—ñ—è –∑–∞–∫—Ä–∏—Ç–∞.")


if __name__ == "__main__":
    loop.run_until_complete(on_startup())

    # Flask —É –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
    threading.Thread(
        target=lambda: app.run(host="0.0.0.0", port=int(os.getenv("PORT", 8000)))
    ).start()

    try:
        loop.run_forever()
    except KeyboardInterrupt:
        pass
    finally:
        loop.run_until_complete(on_shutdown())